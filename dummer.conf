require 'time'
require 'securerandom'

raise "'DUMMER_DATE' must be specified" unless ENV['DUMMER_DATE']

class MyTime
  def initialize(yyyymmdd)
    @yyyymmdd = yyyymmdd
  end

  def strftime(format)
    date   = "#{@yyyymmdd[0..3]}-#{@yyyymmdd[4..5]}-#{@yyyymmdd[6..7]}"
    hour   = '%02d' % (0..23).to_a.sample
    minute = '%02d' % (0..59).to_a.sample
    second = '%02d' % (0..59).to_a.sample
    Time.parse("#{date} #{hour}:#{minute}:#{second}").strftime(format)
  end
end

class LazyString
  def initialize(str)
    @str = str
  end

  def to_s
    eval %Q("#{@str}")
  end

  class Builder
    def initialize(str)
      @str = str
    end

    def to_s
      LazyString.new(@str)
    end
  end
end

class Reqtime
  INTEGER_PART = ([0] * 32) + ([1] * 16) + ([2] * 8) + ([3] * 4) + ([4] * 2) + ([5] * 1)
  def self.generate
    '%d.%d%d%d%d%d%d' % [INTEGER_PART.sample, *(0..9).to_a.sample(6)]
  end
end

configure 'sample' do
  yyyymmdd = ENV['DUMMER_DATE'] # YYYYmmdd
  output 'logs/access.log'
  delimiter "\t"
  rate 1000
  labeled true
  field :time, type: :datetime, format: '%Y-%m-%d %H:%M:%S', value: MyTime.new(yyyymmdd)
  field :id, type: :string, value: LazyString::Builder.new('#{SecureRandom.uuid}')
  field :level, type: :string, any: %w[DEBUG INFO WARN ERROR]
  field :method, type: :string, any: %w[GET POST PUT]
  field :uri, type: :string, any: %w[/api/v1/people /api/v1/textdata /api/v1/messages]
  field :reqtime, type: :string, value: LazyString::Builder.new('#{Reqtime.generate}')
end
